#include "DS1307.h"
#include "hardware.h"
#include "scheduler.h"
#include "main.h"

#define _AND_ACK    (1)
#define _AND_NACK   (0)

uint8_t bcd_to_bin(uint8_t bcd) {
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
}
bool ds1307_read_registers(uint8_t internal_address, uint8_t* buffer, uint8_t size) {
    uint8_t ack_state = 0;

    if ((size != 0) && (buffer != NULL)) {
        i2c_start(); // Send START condition
        ack_state |= i2c_write((DS1307_SLAVE_ADRS_W)); // Write slave address (write mode)
        ack_state |= i2c_write(internal_address);      // Write internal address (register)
        i2c_start();                                  // Send RE-START condition
        ack_state |= i2c_write(DS1307_SLAVE_ADRS_R);  // Write slave address (read mode)

        for (uint8_t i = 0; i < size - 1; i++) {
            buffer[i] = i2c_read(_AND_ACK); // Read data with acknowledgment
        }
        buffer[size - 1] = i2c_read(_AND_NACK); // Read last byte with no acknowledgment
        i2c_stop(); // Send STOP condition

        return (ack_state == 0) ? true : false; // Return success if no errors
    }
    return false; // Return failure if parameters are invalid
}

/**
 * @brief Read current time and date from DS1307
 * 
 * @return ds1307_time_t Struct containing hours, minutes, date, and month
 */
ds1307_time_t ds1307_read_time(void) {
    uint8_t buffer[4];
    ds1307_time_t time;

    // Read from Minutes (0x01), Hours (0x02), Date (0x04), and Month (0x05)
    if (ds1307_read_registers(DS1307_REG_MINUTES, buffer, 4)) {
        time.minutes = bcd_to_bin(buffer[0]);      // Minutes from 0x01
        time.hours = bcd_to_bin(buffer[1] & 0x3F); // Hours from 0x02 (mask for 24-hour format)
        time.date = bcd_to_bin(buffer[2]);         // Date from 0x04
        time.month = bcd_to_bin(buffer[3]);        // Month from 0x05
    } else {
        // Handle read error: Set default or error values
=
