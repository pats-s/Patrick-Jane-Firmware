#include "DS1307.h"
#include "hardware.h"
#include "scheduler.h"
#include "main.h"

#define _AND_ACK    (1)
#define _AND_NACK   (0)

uint8_t bcd_to_bin(uint8_t bcd) {
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
}
bool ds1307_read_registers(uint8_t start_address, uint8_t* buffer, uint8_t length) {
    i2c_start();
    ack_state |= i2c_write((DS1307_ADDRESS << 1) | 0); // Send DS1307 address with write bit
    ack_state |= i2c_write(start_address);             // Set start address
    i2c_start();
    ack_state |= i2c_write((DS1307_ADDRESS << 1) | 1); // Send DS1307 address with read bit

    for (uint8_t i = 0; i < length - 1; i++) {
        buffer[i] = i2c_read(_AND_ACK);       // Read data with acknowledgment
    }
    buffer[length - 1] = i2c_read(_AND_NACK); // Read last byte with no acknowledgment

    i2c_stop();
}

ds1307_time_t ds1307_read_time(void) {
    uint8_t buffer[4];
    ds1307_time_t time;

    // Read from Hours (0x02), Minutes (0x01), Date (0x04), Month (0x05)
    ds1307_read_registers(0x01, buffer, 4);

    time.minutes = bcd_to_bin(buffer[0]);  // Minutes from 0x01
    time.hours = bcd_to_bin(buffer[1] & 0x3F); // Hours from 0x02 (mask for 24-hour format)
    time.date = bcd_to_bin(buffer[2]);     // Date from 0x04
    time.month = bcd_to_bin(buffer[3]);    // Month from 0x05

    return time;
}

